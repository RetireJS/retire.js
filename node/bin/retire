#!/usr/bin/env node

var _         = require('lodash'),
    program   = require('commander'),
    retire    = require('../lib/retire'),
    repo      = require('../lib/repo'),
    resolve   = require('../lib/resolve'),
    scanner   = require('../lib/scanner'),
    forward   = require('../lib/utils').forwardEvent,
    os        = require('os'),
    path      = require('path'),
    fs        = require('fs'),
    ncp       = require('ncp').ncp,
    emitter   = new require('events').EventEmitter;

var events = new emitter();
var jsRepo = null;
var nodeRepo = null;
var vulnsFound = false;
var defaultIgnoreFile = '.retireignore';
var finalResults = [];

scanner.on('vulnerable-dependency-found', function(results) {
  vulnsFound = true;
  finalResults.push(results);
});

/*
 * Parse command line flags.
 */
program
  .version(retire.version)
  .option('')
  .option('-p, --package', 'limit node scan to packages where parent is mentioned in package.json (ignore node_modules)')
  .option('-n, --node',    'Run node dependency scan only')
  .option('-j, --js',      'Run scan of JavaScript files only')
  .option('-v, --verbose', 'Show identified files (by default only vulnerable files are shown)')
  .option('-x, --dropexternal', "Don't include project provided vulnerability repository")
  .option('-c, --nocache', "Don't use local cache")
  .option('')
  .option('--jspath <path>', 'Folder to scan for javascript files')
  .option('--nodepath <path>', 'Folder to scan for node files')
  .option('--path <path>', 'Folder to scan for both')
  .option('--jsrepo <path|url>', 'Local or internal version of repo')
  .option('--noderepo <path|url>', 'Local or internal version of repo')
  .option('--proxy <url>', 'Proxy url (http://some.sever:8080)')
  .option('--outputformat <format>', 'Valid formats: text, json')
  .option('--outputpath <path>', 'File to which output should be written')
  .option('--htmlreport [path]', 'Folder to which HTML report should be written (defaults to \'RetireJS\')')
  .option('--ignore <paths>', 'Comma delimited list of paths to ignore')
  .option('--ignorefile <path>', 'Custom .retireignore file, defaults to .retireignore')
  .option('--exitwith <code>', 'Custom exit code (default: 13) when vulnerabilities are found')
  .parse(process.argv);

var config = _.extend({ path: '.' }, _.pick(program, [
  'package', 'node', 'js', 'jspath', 'verbose', 'nodepath', 'path', 'jsrepo', 'noderepo',
  'dropexternal', 'nocache', 'proxy', 'ignore', 'ignorefile', 'outputformat', 'outputpath', 'htmlreport', 'exitwith'
]));

if (!config.nocache) {
  config.cachedir = path.resolve(os.tmpdir(), '.retire-cache/');
}
config.ignore = config.ignore ? _.map(config.ignore.split(','), function(e) { return path.resolve(e); }) : [];

if (!config.ignorefile && fs.existsSync(defaultIgnoreFile)) {
  config.ignorefile = defaultIgnoreFile;
}

if(config.ignorefile) {
  if (!fs.existsSync(config.ignorefile)) {
    console.warn('Error: Could not read ignore file: ' + config.ignorefile);
    process.exit(1);
  }
  var lines = fs.readFileSync(config.ignorefile).toString().split(/\r\n|\n/g).filter(function(e) { return e !== ''; });
  ignored = _.map(lines, function(e) { return e[0] === '@' ? e.slice(1) : path.resolve(e); });
  config.ignore = config.ignore.concat(ignored);
}

events.on('load-js-repo', function() {
  (config.jsrepo
    ? (config.jsrepo.match(/^https?:\/\//)
      ? repo.loadrepository(config.jsrepo, config)
      : repo.loadrepositoryFromFile(config.jsrepo, config))
    : repo.loadrepository('https://raw.githubusercontent.com/RetireJS/retire.js/master/repository/jsrepository.json', config)
  ).on('done', function(repo) {
      jsRepo = repo;
      events.emit('js-repo-loaded');
  }).on('stop', forward(events, 'stop'));
});


events.on('load-node-repo', function() {
  (config.noderepo
    ? (config.noderepo.match(/^https?:\/\//)
      ? repo.loadrepository(config.noderepo, config)
      : repo.loadrepositoryFromFile(config.noderepo, config))
    : repo.loadrepository('https://raw.githubusercontent.com/RetireJS/retire.js/master/repository/npmrepository.json', config)
  ).on('done', function(repo) {
      nodeRepo = repo;
      events.emit('node-repo-loaded');
  }).on('stop', forward(events, 'stop'));
});

events.on('js-repo-loaded', function() {
  events.emit(config.js ? 'scan-js' : 'load-node-repo');
});

events.on('node-repo-loaded', function() {
  events.emit(config.node ? 'scan-node' : 'scan-js');
});


events.on('scan-js', function() {
  resolve.scanJsFiles(config.jspath || config.path)
    .on('jsfile', function(file) {
      scanner.scanJsFile(file, jsRepo, config);
    })
    .on('bowerfile', function(bowerfile) {
      scanner.scanBowerFile(bowerfile, jsRepo, config);
    })
    .on('end', function() {
      events.emit('js-scanned');
    });
});

events.on('scan-node', function() {
  resolve.getNodeDependencies(config.nodepath || config.path, config.package).on('done', function(dependencies) {
    scanner.scanDependencies(dependencies, nodeRepo, config);
    events.emit('scan-done');
  });
});

events.on('js-scanned', function() {
  events.emit(!config.js ? 'scan-node' : 'scan-done');
});

events.on('scan-done', function() {
  var exit = function(exitCode) {
    exitCode = exitCode || 0;
    process.exit(vulnsFound ? (config.exitwith || 13) : exitCode);
  };
  if (config.fileOutput) {
    config.fileOutput.stream.on('finish', function() {
      fs.close(config.fileOutput.fileDescriptor);
      exit();
    });
  }
  if (config.outputformat === 'json') {
    if (config.fileOutput) {
      config.fileOutput.stream.write(JSON.stringify(finalResults));
      config.fileOutput.stream.end();
    } else {
      (vulnsFound ? console.warn : console.log)(JSON.stringify(finalResults));
      var stream = (vulnsFound ? process.stderr : process.stdout);
      if (! stream.write('', exit)) {
        stream.on('drain', exit);
      }
    } 
  } else if (config.htmlreport) {
    config.htmlreport = typeof config.htmlreport === 'string' ? config.htmlreport : 'RetireJS';
    ncp(__dirname + '/../template', config.htmlreport, function (err) {
      if (err) {
        return console.error(err);
      } else {
        finalResults.forEach(function (file) {
            file.results = _.uniqWith(file.results, _.isEqual);
        });
        fs.writeFile(config.htmlreport + '/retire-data.js', 'var retireJSON = ' + JSON.stringify(finalResults) + ';', function (err) {
          if (err) {
            return console.error(err);
          }
        });
      }
    });
  } else {
    if (config.fileOutput) {
      config.fileOutput.stream.end();
    } else {
     exit();
    }
  }
});

process.on('uncaughtException', function (err) {
  console.warn('Exception caught: ', arguments);
  console.warn(err.stack)
  process.exit(1);
});

events.on('stop', function() {
  console.warn('Error:', arguments);
  process.exit(1);
});

if (typeof config.outputpath === 'string') {
  config.fileOutput = {
    fileDescriptor: fs.openSync(config.outputpath, "w")
  };
  if (config.fileOutput.fileDescriptor < 0) {
    console.error("Could not open " + config.outputpath + " for writing");
    process.exit(9);
  } else {
    config.fileOutput.stream = fs.createWriteStream('', {fd: config.fileOutput.fileDescriptor});
    config.writeToFile = function(message) {
      config.fileOutput.stream.write(message);
      config.fileOutput.stream.write('\n');
    };
    config.logger = config.writeToFile;
  }
}

if (config.outputformat === 'json') {
  config.logger = function () {};
  config.warnlogger = function () {};
}

if (config.node) {
  events.emit('load-node-repo');
} else {
  events.emit('load-js-repo');
}
